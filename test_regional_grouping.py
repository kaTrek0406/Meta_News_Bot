#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from src.smart_formatter import group_changes_by_region, format_region_summary

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
test_details = [
    {
        "title": "Updated Ad Standards Policy", 
        "url": "https://transparency.meta.com/policies/ad-standards/",
        "region": "GLOBAL",
        "global_diff": {
            "changed": [{"was": "Old policy text", "now": "New policy text with restrictions"}],
            "added": ["New restriction for political ads"],
            "removed": []
        }
    },
    {
        "title": "EU Political Ads Restrictions", 
        "url": "https://transparency.meta.com/policies/ad-standards/siep-advertising/siep",
        "region": "EU",
        "global_diff": {
            "changed": [{"was": "Basic EU rules", "now": "Enhanced SIEP requirements"}],
            "added": ["Stricter verification for political advertisers"],
            "removed": ["Old exemptions"]
        }
    },
    {
        "title": "Moldova-specific Ad Standards", 
        "url": "https://transparency.meta.com/policies/ad-standards/",
        "region": "MD",
        "global_diff": {
            "changed": [{"was": "General standards", "now": "Moldova-specific requirements"}],
            "added": ["Local language requirements", "Regional compliance rules"],
            "removed": []
        }
    },
    {
        "title": "API Changelog for Moldova", 
        "url": "https://developers.facebook.com/docs/marketing-api/marketing-api-changelog/",
        "region": "MD",
        "global_diff": {
            "changed": [],
            "added": ["New Moldova region targeting field"],
            "removed": []
        }
    }
]

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
    print("=" * 50)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    grouped = group_changes_by_region(test_details)
    
    print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(grouped)}")
    for region, details in grouped.items():
        print(f"  ‚Ä¢ {region}: {len(details)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    print("\nüè∑Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
    print("=" * 50)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–≥–∏–æ–Ω
    for region in sorted(grouped.keys()):
        region_details = grouped[region]
        print(f"\nüîπ –†–µ–≥–∏–æ–Ω: {region} ({len(region_details)} –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary_parts = format_region_summary(region, region_details)
        
        for i, part in enumerate(summary_parts, 1):
            print(f"\n--- –ß–∞—Å—Ç—å {i} ---")
            print(part)
    
    print("\n‚úÖ –¢–µ—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()