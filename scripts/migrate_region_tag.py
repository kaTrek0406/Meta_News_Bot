#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: –¥–æ–±–∞–≤–ª—è–µ—Ç region='GLOBAL' –∫ –∑–∞–ø–∏—Å—è–º –≤ –∫—ç—à–µ, –≥–¥–µ –µ–≥–æ –Ω–µ—Ç.

–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ:
- data/cache/cache.json
- data/items.json (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ò –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ "region": "GLOBAL" —Ç—É–¥–∞, –≥–¥–µ –µ–≥–æ –Ω–µ—Ç.
–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
"""

import json
import os
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parents[1]
CACHE_FILE = PROJECT_ROOT / "data" / "cache" / "cache.json"
ITEMS_FILE = PROJECT_ROOT / "data" / "items.json"


def migrate_file(file_path: Path) -> tuple[int, int]:
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª: –¥–æ–±–∞–≤–ª—è–µ—Ç region='GLOBAL' –≥–¥–µ –µ–≥–æ –Ω–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (total_items, migrated_items).
    """
    if not file_path.exists():
        return 0, 0
    
    try:
        data = json.loads(file_path.read_text(encoding="utf-8"))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return 0, 0
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if isinstance(data, list):
        items = data
    elif isinstance(data, dict) and "items" in data:
        items = data["items"]
    else:
        print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_path}")
        return 0, 0
    
    if not isinstance(items, list):
        print(f"‚ö†Ô∏è  items –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –≤ {file_path}")
        return 0, 0
    
    total = len(items)
    migrated = 0
    
    for item in items:
        if isinstance(item, dict) and "region" not in item:
            item["region"] = "GLOBAL"
            migrated += 1
    
    if migrated > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        try:
            tmp_file = file_path.with_suffix(".tmp")
            with open(tmp_file, "w", encoding="utf-8") as f:
                if isinstance(data, list):
                    json.dump(items, f, ensure_ascii=False, indent=2)
                else:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            os.replace(tmp_file, file_path)
            print(f"‚úÖ {file_path.name}: –¥–æ–±–∞–≤–ª–µ–Ω–æ region='GLOBAL' –∫ {migrated} –∑–∞–ø–∏—Å—è–º –∏–∑ {total}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {file_path}: {e}")
            return total, 0
    else:
        print(f"‚ÑπÔ∏è  {file_path.name}: –≤—Å–µ {total} –∑–∞–ø–∏—Å–µ–π —É–∂–µ –∏–º–µ—é—Ç region")
    
    return total, migrated


def main():
    print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ region='GLOBAL' –∫ –∑–∞–ø–∏—Å—è–º –±–µ–∑ region\n")
    
    total_all = 0
    migrated_all = 0
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è cache.json
    if CACHE_FILE.exists():
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: {CACHE_FILE.relative_to(PROJECT_ROOT)}")
        t, m = migrate_file(CACHE_FILE)
        total_all += t
        migrated_all += m
    else:
        print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {CACHE_FILE.relative_to(PROJECT_ROOT)}")
    
    print()
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è items.json (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if ITEMS_FILE.exists():
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: {ITEMS_FILE.relative_to(PROJECT_ROOT)}")
        t, m = migrate_file(ITEMS_FILE)
        total_all += t
        migrated_all += m
    else:
        print(f"‚ÑπÔ∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): {ITEMS_FILE.relative_to(PROJECT_ROOT)}")
    
    print()
    print("=" * 60)
    print(f"üìä –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_all}")
    print(f"‚ú® –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ (–¥–æ–±–∞–≤–ª–µ–Ω region): {migrated_all}")
    print(f"‚úÖ –£–∂–µ –∏–º–µ–ª–∏ region: {total_all - migrated_all}")
    print("=" * 60)
    
    if migrated_all > 0:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ÑπÔ∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å - –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç region")


if __name__ == "__main__":
    main()
