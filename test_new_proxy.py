#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Froxy –ø—Ä–æ–∫—Å–∏ –¥–ª—è Meta News Bot.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–∫—Å–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Meta —Å–∞–π—Ç–æ–≤.
"""

import asyncio
import httpx
import time
from datetime import datetime

# –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ Froxy
NEW_PROXY = "http://SakkTDU3kVHpEtNr:wifi;md;;;@proxy.froxy.com:9000"
EU_PROXY = "http://SakkTDU3kVHpEtNr:wifi;de;;;@proxy.froxy.com:9000"

# –¢–µ—Å—Ç–æ–≤—ã–µ URL Meta
TEST_URLS = [
    "https://transparency.meta.com/policies/ad-standards/",
    "https://www.facebook.com/business/help/298000447747885",
    "https://developers.facebook.com/docs/marketing-api/marketing-api-changelog/",
    "https://metastatus.com/",
    "https://business.whatsapp.com/policy",
]

# GEO —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
GEO_TEST_URL = "http://httpbin.org/ip"

def get_random_headers():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    return {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.9,ro;q=0.8,ru;q=0.7",
        "Cache-Control": "max-age=0",
        "DNT": "1",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1",
        "Sec-Fetch-Dest": "document",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-Site": "none",
        "Sec-Fetch-User": "?1",
    }

async def test_proxy(proxy_url: str, region: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region}")
    print(f"–ü—Ä–æ–∫—Å–∏: {proxy_url.split('@')[1] if '@' in proxy_url else proxy_url}")
    print("=" * 50)
    
    proxies = {"http://": proxy_url, "https://": proxy_url}
    headers = get_random_headers()
    timeout = httpx.Timeout(30.0, connect=15.0)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    try:
        async with httpx.AsyncClient(proxies=proxies, timeout=timeout, verify=False) as client:
            print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...")
            response = await client.get(GEO_TEST_URL, headers=headers)
            response.raise_for_status()
            ip_info = response.json()
            print(f"‚úÖ IP: {ip_info.get('origin', 'N/A')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Meta URL
    success_count = 0
    for i, url in enumerate(TEST_URLS, 1):
        try:
            print(f"\nüìã {i}/{len(TEST_URLS)} –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
            
            start_time = time.time()
            async with httpx.AsyncClient(proxies=proxies, timeout=timeout, verify=False) as client:
                response = await client.get(url, headers=headers)
                response.raise_for_status()
                content = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                if "You're Temporarily Blocked" in content or "going too fast" in content:
                    print(f"‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Facebook")
                    continue
                elif "407 Proxy Authentication Required" in content:
                    print(f"‚ùå 407 Proxy Authentication Required")
                    continue
                    
                load_time = time.time() - start_time
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ {load_time:.2f}—Å (—Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                success_count += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i < len(TEST_URLS):
                    await asyncio.sleep(2)
                    
        except httpx.HTTPStatusError as e:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}: {url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {region}: {success_count}/{len(TEST_URLS)} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    return success_count > 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Froxy –ø—Ä–æ–∫—Å–∏ –¥–ª—è Meta News Bot")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–ª–¥–∞–≤—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏
    md_success = await test_proxy(NEW_PROXY, "MD (–ú–æ–ª–¥–æ–≤–∞)")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    await asyncio.sleep(5)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏
    eu_success = await test_proxy(EU_PROXY, "EU (–ï–≤—Ä–æ–ø–∞)")
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    print(f"üá≤üá© –ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if md_success else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"üá™üá∫ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if eu_success else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if md_success or eu_success:
        print("\n‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ë–æ—Ç —Å–º–æ–∂–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        print("üöÄ –ú–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ Railway.")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
        print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Froxy –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞") 
        print("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())