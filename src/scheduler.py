# -*- coding: utf-8 -*-

import asyncio
import logging
import os
from datetime import time
from zoneinfo import ZoneInfo

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from .pipeline import run_update
from .telegram_notify import notify

logging.basicConfig(level=os.getenv("LOGLEVEL", "INFO"))
log = logging.getLogger(__name__)

TZ_NAME = os.getenv("TZ", "Europe/Chisinau")
DAILY_DISPATCH_TIME = os.getenv("DAILY_DISPATCH_TIME", "09:00")  # HH:MM

def _parse_hm(s: str) -> tuple[int, int]:
    hh, mm = (s or "09:00").split(":")
    return int(hh), int(mm)

async def job():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç"""
    log.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤‚Ä¶")
    try:
        res = await run_update()
        changed = res.get("changed", 0)
        total_sec = res.get("sections_total_changed", 0)
        details = res.get("details", [])

        if changed == 0:
            await notify("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        msg_lines = [
            f"üïò –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            f"–ò–∑–º–µ–Ω–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {changed}, —Å–µ–∫—Ü–∏–π: {total_sec}",
            ""
        ]
        for d in details[:5]:
            ttl = d.get("title") or d.get("url") or ""
            url = d.get("url", "")
            diff = d.get("diff", {})
            if diff.get("added"):
                msg_lines.append(f"‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–æ:* {', '.join(diff['added'][:2])}")
            if diff.get("modified"):
                msg_lines.append(f"‚úé *–ò–∑–º–µ–Ω–µ–Ω–æ:* {', '.join(diff['modified'][:2])}")
            if diff.get("removed"):
                msg_lines.append(f"‚ûñ *–£–¥–∞–ª–µ–Ω–æ:* {', '.join(diff['removed'][:2])}")
            msg_lines.append(f"üîó {url}\n")

        if len(details) > 5:
            msg_lines.append(f"‚Ä¶–∏ –µ—â—ë {len(details) - 5} –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

        await notify("\n".join(msg_lines))

    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: %s", e)
        await notify(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:\n{e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    tz = ZoneInfo(TZ_NAME)
    hh, mm = _parse_hm(DAILY_DISPATCH_TIME)
    sch = AsyncIOScheduler(timezone=tz)
    trigger = CronTrigger(hour=hh, minute=mm, timezone=tz)
    sch.add_job(job, trigger, id="daily_update", max_instances=1, coalesce=True)
    sch.start()
    log.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: %02d:%02d %s –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", hh, mm, TZ_NAME)
    return sch

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    scheduler = run_scheduler()
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
