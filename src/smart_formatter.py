# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥–æ–≤.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
"""

import logging
import re
from typing import Dict, List, Tuple
from html import escape

log = logging.getLogger(__name__)

# –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏ (—Ñ–ª–∞–≥–∏ + —Ç–µ–≥–∏)
REGION_BADGES = {
    "EU": "üá™üá∫ [EU]",
    "MD": "üá≤üá© [MD]",
    "GLOBAL": "üåç [GLOBAL]",
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
TARGETING_KEYWORDS = {
    "–∫—Ä–∏—Ç–∏—á–Ω–æ": [
        "discontinued", "removed", "deprecated", "no longer available", "will be retired",
        "—É–¥–∞–ª–µ–Ω–æ", "–±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ", "–æ—Ç–∫–ª—é—á–µ–Ω–æ",
        "restricted", "prohibited", "banned", "–∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
    ],
    "–≤–∞–∂–Ω–æ": [
        "new", "added", "introduced", "available", "support", "launch",
        "–Ω–æ–≤—ã–π", "–¥–æ–±–∞–≤–ª–µ–Ω", "–¥–æ—Å—Ç—É–ø–µ–Ω", "–∑–∞–ø—É—Å–∫", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "update", "change", "modify", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ",
        "targeting", "audience", "placement", "—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥", "–∞—É–¥–∏—Ç–æ—Ä–∏—è", "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ",
        "api", "endpoint", "field", "parameter"
    ],
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": [
        "date", "version", "documentation", "example",
        "–¥–∞—Ç–∞", "–≤–µ—Ä—Å–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ø—Ä–∏–º–µ—Ä"
    ]
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
IMPACT_CATEGORIES = {
    "api": ["api", "endpoint", "field", "parameter", "method", "request", "response"],
    "targeting": ["targeting", "audience", "geo", "location", "demographic", "interest", "behavior", 
                  "—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥", "–∞—É–¥–∏—Ç–æ—Ä–∏—è", "–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è"],
    "placement": ["placement", "messenger", "instagram", "facebook", "stories", "reels", "feed",
                  "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", "–ø–æ–∑–∏—Ü–∏—è"],
    "budget": ["budget", "bid", "cost", "price", "billing", "payment", "–±—é–¥–∂–µ—Ç", "—Å—Ç–∞–≤–∫–∞", "—Ü–µ–Ω–∞"],
    "format": ["format", "creative", "image", "video", "carousel", "—Ñ–æ—Ä–º–∞—Ç", "–∫—Ä–µ–∞—Ç–∏–≤"],
    "policy": ["policy", "prohibited", "restricted", "compliance", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–∑–∞–ø—Ä–µ—â–µ–Ω–æ", "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"],
    "reporting": ["insight", "metric", "report", "analytics", "attribution", "–æ—Ç—á—ë—Ç", "–º–µ—Ç—Ä–∏–∫–∞", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"],
}


def _normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return re.sub(r'\s+', ' ', (text or "").strip().lower())


def _extract_key_changes(was: str, now: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
    was_norm = _normalize_text(was)
    now_norm = _normalize_text(now)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã
    date_pattern = r'\b\d{1,2}\s+(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫)[a-z–∞-—è]*\s+\d{4}\b'
    dates_was = set(re.findall(date_pattern, was_norm))
    dates_now = set(re.findall(date_pattern, now_norm))
    
    changes = []
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç
    if dates_now - dates_was:
        new_dates = ", ".join(dates_now - dates_was)
        changes.append(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞: {new_dates}")
    
    # –ù–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã/–ø–æ–ª—è
    endpoint_pattern = r'(?:GET|POST|DELETE|PUT)\s+/\{[^}]+\}'
    endpoints_was = set(re.findall(endpoint_pattern, was))
    endpoints_now = set(re.findall(endpoint_pattern, now))
    
    if endpoints_now - endpoints_was:
        for ep in endpoints_now - endpoints_was:
            changes.append(f"–ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: {ep}")
    
    if endpoints_was - endpoints_now:
        for ep in endpoints_was - endpoints_now:
            changes.append(f"–£–¥–∞–ª—ë–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç: {ep}")
    
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if "no longer available" in now_norm and "no longer available" not in was_norm:
        changes.append("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if "applies to all versions" in now_norm and "applies to all versions" not in was_norm:
        changes.append("‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –í–°–ï–ú –≤–µ—Ä—Å–∏—è–º API")
    
    # –ò—â–µ–º –Ω–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if "limited to" in now_norm and "limited to" not in was_norm:
        limitation = re.search(r'limited to (\d+\s+\w+)', now_norm)
        if limitation:
            changes.append(f"‚ö†Ô∏è –ù–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limitation.group(1)}")
    
    return changes


def _detect_impact_category(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–ª–∏—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    text_lower = text.lower()
    
    for category, keywords in IMPACT_CATEGORIES.items():
        for kw in keywords:
            if kw in text_lower:
                return category
    
    return "general"


def _assess_priority(was: str, now: str, added: List[str], removed: List[str]) -> Tuple[str, str]:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Ä–æ–≤–µ–Ω—å, –∏–∫–æ–Ω–∫–∞)
    """
    combined_text = f"{was} {now} {' '.join(added)} {' '.join(removed)}".lower()
    
    # –ö—Ä–∏—Ç–∏—á–Ω–æ
    for kw in TARGETING_KEYWORDS["–∫—Ä–∏—Ç–∏—á–Ω–æ"]:
        if kw in combined_text:
            return ("üî¥ –ö–†–ò–¢–ò–ß–ù–û", "üî¥")
    
    # –í–∞–∂–Ω–æ
    for kw in TARGETING_KEYWORDS["–≤–∞–∂–Ω–æ"]:
        if kw in combined_text:
            return ("üü° –í–ê–ñ–ù–û", "üü°")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    return ("üü¢ –ò–Ω—Ñ–æ", "üü¢")


def _format_api_change(detail: Dict) -> str:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è API –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    title = detail.get("title", "")
    url = detail.get("url", "")
    region = detail.get("region", "GLOBAL")
    
    gd = detail.get("global_diff") or {}
    changed = gd.get("changed") or []
    added = gd.get("added") or []
    removed = gd.get("removed") or []
    
    output = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    priority_text, priority_icon = _assess_priority(
        " ".join([p.get("was", "") for p in changed]),
        " ".join([p.get("now", "") for p in changed]),
        added,
        removed
    )
    
    region_badge = REGION_BADGES.get(region, "üåç [GLOBAL]")
    output.append(f"{priority_icon} <b>{escape(title)}</b> {region_badge}")
    output.append(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}")
    output.append("")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    key_changes = []
    for pair in changed:
        was = pair.get("was", "")
        now = pair.get("now", "")
        extracted = _extract_key_changes(was, now)
        key_changes.extend(extracted)
    
    if key_changes:
        output.append("<b>üìù –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>")
        for change in key_changes[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            output.append(f"‚Ä¢ {escape(change)}")
        output.append("")
    
    # –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if added:
        output.append("<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:</b>")
        for item in added[:3]:  # –¢–æ–ø-3
            item_text = item.strip()
            if len(item_text) > 150:
                item_text = item_text[:147] + "..."
            output.append(f"‚Ä¢ {escape(item_text)}")
        if len(added) > 3:
            output.append(f"<i>... –∏ –µ—â—ë {len(added) - 3}</i>")
        output.append("")
    
    # –£–¥–∞–ª—ë–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if removed:
        output.append("<b>‚ûñ –£–¥–∞–ª–µ–Ω–æ:</b>")
        for item in removed[:3]:
            item_text = item.strip()
            if len(item_text) > 150:
                item_text = item_text[:147] + "..."
            output.append(f"‚Ä¢ {escape(item_text)}")
        if len(removed) > 3:
            output.append(f"<i>... –∏ –µ—â—ë {len(removed) - 3}</i>")
        output.append("")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    impact_cat = _detect_impact_category(title + " " + str(changed))
    recommendations = _get_recommendations(impact_cat, priority_text, added, removed, changed)
    
    if recommendations:
        output.append("<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>")
        for rec in recommendations:
            output.append(f"‚Ä¢ {rec}")
        output.append("")
    
    # –°—Å—ã–ª–∫–∞
    if url:
        output.append(f"üîó {escape(url)}")
    
    return "\n".join(output)


def _format_policy_change(detail: Dict) -> str:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–∏—Ç–∏–∫"""
    title = detail.get("title", "")
    url = detail.get("url", "")
    region = detail.get("region", "GLOBAL")
    
    gd = detail.get("global_diff") or {}
    changed = gd.get("changed") or []
    
    output = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    priority_text, priority_icon = _assess_priority(
        " ".join([p.get("was", "") for p in changed]),
        " ".join([p.get("now", "") for p in changed]),
        [],
        []
    )
    
    region_badge = REGION_BADGES.get(region, "üåç [GLOBAL]")
    output.append(f"{priority_icon} <b>{escape(title)}</b> {region_badge}")
    
    # –î–ª—è –ø–æ–ª–∏—Ç–∏–∫ –≤–∞–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö
    has_meaningful_change = False
    
    for pair in changed:
        was = _normalize_text(pair.get("was", ""))
        now = _normalize_text(pair.get("now", ""))
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –¥–∞—Ç–∞—Ö
        was_no_dates = re.sub(r'\d+\s+\w+\s+\d{4}', '', was)
        now_no_dates = re.sub(r'\d+\s+\w+\s+\d{4}', '', now)
        
        if was_no_dates != now_no_dates:
            has_meaningful_change = True
            break
    
    if not has_meaningful_change:
        # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
        output.append("")
        output.append("‚ÑπÔ∏è <i>–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π</i>")
    else:
        output.append("")
        output.append("<b>‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª–∏—Ç–∏–∫–∏!</b>")
        output.append("")
        output.append("<b>üí° –î–µ–π—Å—Ç–≤–∏—è:</b>")
        output.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—É—â–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
        output.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        output.append("‚Ä¢ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    output.append("")
    if url:
        output.append(f"üîó {escape(url)}")
    
    return "\n".join(output)


def _get_recommendations(category: str, priority: str, added: List[str], removed: List[str], changed: List[Dict]) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    recs = []
    
    if "–ö–†–ò–¢–ò–ß–ù–û" in priority:
        if category == "api":
            recs.append("‚ö†Ô∏è –°—Ä–æ—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            recs.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        elif category == "targeting":
            recs.append("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
            recs.append("–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞")
        elif category == "placement":
            recs.append("‚ö†Ô∏è –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            recs.append("–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–µ–π—Å–º–µ–Ω—Ç—ã")
        elif category == "policy":
            recs.append("‚ö†Ô∏è –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
            recs.append("–†–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    elif "–í–ê–ñ–ù–û" in priority:
        if category == "api":
            recs.append("–û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏")
            recs.append("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        elif category == "targeting":
            recs.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞")
            recs.append("A/B —Ç–µ—Å—Ç —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        elif category == "reporting":
            recs.append("–û–±–Ω–æ–≤–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã –∏ –æ—Ç—á—ë—Ç—ã")
            recs.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    
    else:  # –ò–Ω—Ñ–æ
        if removed:
            recs.append("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π")
        if added:
            recs.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    
    return recs[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


def group_changes_by_region(details: List[Dict]) -> Dict[str, List[Dict]]:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    grouped = {}
    
    for detail in details:
        region = detail.get("region", "GLOBAL")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–≥–∏–æ–Ω
        if region not in grouped:
            grouped[region] = []
        grouped[region].append(detail)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log.info(f"üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {', '.join([f'{k}({len(v)})' for k, v in grouped.items()])}")
    
    return grouped

def format_region_summary(region: str, details: List[Dict]) -> List[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not details:
        return []
    
    region_badge = REGION_BADGES.get(region, f"üåç [{region}]")
    output = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–≥–∏–æ–Ω–∞
    if region == "MD":
        output.append(f"üá≤üá© <b>–ú–û–õ–î–û–í–ê ({region})</b>")
        output.append(f"üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–ª–¥–∞–≤—Å–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
    elif region == "EU":
        output.append(f"üá™üá∫ <b>–ï–í–†–û–ü–ê ({region})</b>")
        output.append(f"üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
    else:
        output.append(f"{region_badge} <b>–ì–õ–û–ë–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø</b>")
        output.append(f"üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤")
    
    output.append(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    output.append("")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–≥–∏–æ–Ω–µ
    for i, detail in enumerate(details, 1):
        title = detail.get("title", "")
        url = detail.get("url", "")
        
        gd = detail.get("global_diff") or {}
        changed = gd.get("changed") or []
        added = gd.get("added") or []
        removed = gd.get("removed") or []
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_text, priority_icon = _assess_priority(
            " ".join([p.get("was", "") for p in changed]),
            " ".join([p.get("now", "") for p in changed]),
            added,
            removed
        )
        
        output.append(f"<b>{i}. {escape(title)}</b> {priority_icon}")
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes_count = len(changed) + len(added) + len(removed)
        if changes_count > 0:
            change_parts = []
            if added:
                change_parts.append(f"+{len(added)}")
            if removed:
                change_parts.append(f"-{len(removed)}")
            if changed:
                change_parts.append(f"~{len(changed)}")
            
            output.append(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è: {' '.join(change_parts)}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 2 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
        key_changes = []
        for pair in changed[:2]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
            was = pair.get("was", "")
            now = pair.get("now", "")
            extracted = _extract_key_changes(was, now)
            key_changes.extend(extracted[:1])  # –ü–æ 1 –æ—Ç –∫–∞–∂–¥–æ–≥–æ
        
        if key_changes:
            for change in key_changes[:2]:
                output.append(f"‚Ä¢ {escape(change[:100])}{'...' if len(change) > 100 else ''}")
        
        if url:
            output.append(f"üîó <a href='{escape(url)}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>")
        
        if i < len(details):  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            output.append("")
    
    return ["\n".join(output)]

def format_change_smart(detail: Dict) -> List[str]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        title = detail.get("title", "")
        url = detail.get("url", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        is_api = "api" in url.lower() or "developers.facebook.com" in url
        is_policy = "transparency.meta.com" in url or "policy" in url.lower()
        
        if is_api:
            formatted = _format_api_change(detail)
        elif is_policy:
            formatted = _format_policy_change(detail)
        else:
            # –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            formatted = _format_api_change(detail)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤
        MAX_LEN = 3500
        blocks = []
        if len(formatted) <= MAX_LEN:
            blocks.append(formatted)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –∞–±–∑–∞—Ü–∞–º
            lines = formatted.split("\n")
            current_block = ""
            for line in lines:
                if len(current_block) + len(line) + 1 > MAX_LEN:
                    if current_block:
                        blocks.append(current_block)
                    current_block = line
                else:
                    current_block += ("\n" if current_block else "") + line
            if current_block:
                blocks.append(current_block)
        
        return blocks
    
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        title = detail.get("title", "")
        url = detail.get("url", "")
        return [f"‚Ä¢ <b>{escape(title)}</b>\n\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\nüîó {escape(url)}"]
