# -*- coding: utf-8 -*-
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —à—É–º.
"""

import os
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional
import asyncio

log = logging.getLogger(__name__)

# –ö—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏)
_error_cache: Dict[str, datetime] = {}
_ERROR_COOLDOWN = timedelta(hours=1)  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–Ω—É –æ—à–∏–±–∫—É —á–∞—â–µ —Ä–∞–∑–∞ –≤ —á–∞—Å

# –£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫
ERROR_LEVELS = {
    "critical": "üî¥",  # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
    "high": "üü†",      # –í–∞–∂–Ω—ã–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    "medium": "üü°",    # –°—Ä–µ–¥–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å
    "low": "üü¢",       # –ù–∏–∑–∫–∏–µ - —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–¥–∫–µ
}


def _should_notify(error_key: str, level: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    if level == "critical":
        return True  # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –≤—Å–µ–≥–¥–∞
    
    if level == "low":
        return False  # –ù–∏–∑–∫–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if error_key in _error_cache:
        last_sent = _error_cache[error_key]
        if datetime.now() - last_sent < _ERROR_COOLDOWN:
            return False  # –ù–µ–¥–∞–≤–Ω–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    _error_cache[error_key] = datetime.now()
    return True


def _classify_error(error_type: str, message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"""
    message_lower = message.lower()
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    if any(word in message_lower for word in [
        "bot token", "authentication", "unauthorized", 
        "credential", "permission denied", "access denied"
    ]):
        return "critical"
    
    # –í–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    if any(word in message_lower for word in [
        "timeout", "connection", "network", "database",
        "fatal", "crash", "exception"
    ]):
        return "high"
    
    # –°—Ä–µ–¥–Ω–∏–µ (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)
    if any(word in message_lower for word in [
        "502", "503", "429", "temporarily blocked",
        "rate limit", "too many requests"
    ]):
        return "medium"
    
    # –ù–∏–∑–∫–∏–µ (–æ–∂–∏–¥–∞–µ–º—ã–µ)
    if any(word in message_lower for word in [
        "chat not found", "user blocked", "403 forbidden",
        "no_peer"
    ]):
        return "low"
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤–∞–∂–Ω—ã–µ
    return "high"


def _format_error_message(error_type: str, message: str, level: str, context: Optional[Dict] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è Telegram"""
    icon = ERROR_LEVELS.get(level, "‚ö†Ô∏è")
    
    lines = [
        f"{icon} <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>",
        f"<b>–¢–∏–ø:</b> {error_type}",
        f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {level.upper()}",
        "",
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>",
        f"<code>{message[:500]}</code>",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    ]
    
    if context:
        lines.append("")
        lines.append("<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b>")
        for key, value in context.items():
            if value:
                lines.append(f"‚Ä¢ {key}: <code>{str(value)[:100]}</code>")
    
    lines.append("")
    lines.append(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    return "\n".join(lines)


async def notify_error(
    error_type: str,
    message: str,
    context: Optional[Dict] = None,
    force: bool = False
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä. "Parsing Error", "Network Error")
    - message: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    - context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (url, source –∏ —Ç.–¥.)
    - force: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    try:
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        level = _classify_error(error_type, message)
        
        # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
        error_key = f"{error_type}:{message[:100]}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not force and not _should_notify(error_key, level):
            log.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_key} (–Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏)")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted = _format_error_message(error_type, message, level, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ telegram_notify
        from .telegram_notify import notify_dev
        await notify_dev(formatted)
        
        log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {error_type}")
    
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


async def notify_errors_summary(errors: list):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ—à–∏–±–∫–∞–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - errors: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏–∑ run_update()
    """
    if not errors:
        return
    
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É
        error_groups = {}
        for err in errors:
            error_type = err.get("error", "Unknown")
            if error_type not in error_groups:
                error_groups[error_type] = []
            error_groups[error_type].append(err)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        lines = [
            "üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º</b>",
            "",
            f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(errors)}",
            f"–¢–∏–ø–æ–≤ –æ—à–∏–±–æ–∫: {len(error_groups)}",
            "",
        ]
        
        # –¢–æ–ø-3 —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫
        sorted_groups = sorted(error_groups.items(), key=lambda x: len(x[1]), reverse=True)
        for i, (error_type, error_list) in enumerate(sorted_groups[:3], 1):
            count = len(error_list)
            sources = [e.get("tag", "?") for e in error_list[:3]]
            
            lines.append(f"{i}. <b>{error_type[:50]}</b>")
            lines.append(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
            lines.append(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources)}")
            if count > 3:
                lines.append(f"   <i>... –∏ –µ—â—ë {count - 3}</i>")
            lines.append("")
        
        if len(sorted_groups) > 3:
            lines.append(f"<i>... –∏ –µ—â—ë {len(sorted_groups) - 3} —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫</i>")
        
        lines.append("")
        lines.append("üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /refresh –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏</i>")
        
        message = "\n".join(lines)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ (> 30% –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
        from .config import SOURCES
        error_rate = len(errors) / len(SOURCES) if SOURCES else 0
        
        if error_rate > 0.3:  # –ë–æ–ª—å—à–µ 30% –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
            from .telegram_notify import notify_dev
            await notify_dev(message)
            log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º: {len(errors)} –æ—à–∏–±–æ–∫")
    
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –æ—à–∏–±–∫–∞–º: {e}")


# –£–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
async def notify_parsing_error(url: str, error: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    await notify_error(
        "Parsing Error",
        error,
        context={"URL": url}
    )


async def notify_network_error(url: str, error: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ç–∏"""
    await notify_error(
        "Network Error",
        error,
        context={"URL": url}
    )


async def notify_proxy_error(error: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–æ–∫—Å–∏"""
    await notify_error(
        "Proxy Error",
        error,
        force=True  # –û—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤–∞–∂–Ω—ã
    )


async def notify_telegram_error(error: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ Telegram"""
    await notify_error(
        "Telegram Error",
        error
    )


async def notify_critical(error: str, context: Optional[Dict] = None):
    """–ö—Ä–∏—Ç–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è)"""
    await notify_error(
        "Critical Error",
        error,
        context=context,
        force=True
    )
